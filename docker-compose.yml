version: "3.8"

services:

###############################################################################
################################ PRODUCTION  ##################################
###############################################################################

################################# NETWORK #####################################

  # DNS-level ad + tracking blocker
  pihole:
    image: pihole/pihole:latest
    container_name: pihole
    network_mode: "host"
    restart: always
    cap_add:
      - NET_ADMIN
    dns:
      - 127.0.0.1
      - 1.1.1.1
    environment:
      - "TZ=${TZ}"
      - "WEBPASSWORD=${WEBPASSWORD}"
      - "DNS1=1.1.1.1"
      - "DNS2=1.0.0.1"
      - "DNSMASQ_LISTENING=all"
    volumes:
      - "${USERDIR}/docker/pihole/pihole/:/etc/pihole/"
      - "${USERDIR}/docker/pihole/dnsmasq.d/:/etc/dnsmasq.d"
      - "${USERDIR}/docker/pihole/pihole.log:/var/log/pihole.log"

  # VPN using wireguard protocol and Private Internet Access provider
  wireguard-pia:
    image: thrnz/docker-wireguard-pia:latest
    container_name: wireguard-pia
    restart: always
    depends_on:
      - pihole
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      # wg-quick fails to set this without --privileged, so set it here instead if needed
      - net.ipv4.conf.all.src_valid_mark=1
      # May as well disable ipv6. Should be blocked anyway.
      - net.ipv6.conf.default.disable_ipv6=1
      - net.ipv6.conf.all.disable_ipv6=1
      - net.ipv6.conf.lo.disable_ipv6=1
    # The container has no recovery logic. Use a healthcheck to catch disconnects.
    healthcheck:
      test: ping -c 1 www.google.com || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - "LOC=${PIA_LOC}"
      - "USER=${PIA_USER}"
      - "PASS=${PIA_PASS}"
      - "LOCAL_NETWORK=${LOCAL_NET}"
      - PORT_FORWARDING=1
      - PORT_PERSIST=1
    volumes:
      - "${USERDIR}/docker/wireguard-pia:/pia"
      - "${USERDIR}/docker/shared:/pia-shared"
    ports:
      - "${SERVER_IP}:9117:9117" # jackett
      - "${SERVER_IP}:9091:9091/tcp" # transmission
      - "${TRNS_PORT}:51413/tcp" # torrents
      - "${TRNS_PORT}:51413/udp" # torrents
      - "${SERVER_IP}:20202:8989/tcp" # sonarr
      - "${SERVER_IP}:5299:5299/tcp" # lazylibrarian
      - "${SERVER_IP}:30303:7878/tcp" # radarr
      - "${SERVER_IP}:3579:3579/tcp" # ombi
      - "${SERVER_IP}:5800:5800/tcp" # firefox

################################ MANAGEMENT ####################################

  # easy container and stack management + monitoring
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    network_mode: "host"
    restart: always
    environment:
      - "TZ=${TZ}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - "${USERDIR}/docker/portainer:/data"
      - "${USERDIR}/docker/shared:/shared"

  # portal similar to commercial app locker (mobile-friendly!)
  heimdall:
    image: ghcr.io/linuxserver/heimdall:latest
    container_name: heimdall
    restart: unless-stopped
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
    volumes:
      - "${USERDIR}/docker/heimdall:/config"
    ports:
      - 303:80 # HTTP
      #- 720:443 # HTTPS -- unnecessary for now

################################# TORRENTS ####################################

  # torrent client -- currently has issues with magnet links in watch folder
  transmission:
    image: ghcr.io/linuxserver/transmission:latest
    container_name: transmission
    network_mode: "service:wireguard-pia"
    restart: unless-stopped
    depends_on:
      - pihole
      - wireguard-pia
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
      - "USER=${TRNS_USER}"
      - "PASS=${TRNS_PASS}"
      - TRANSMISSION_WEB_HOME=/transmission-web-control/ #optional
      - TRANSMISSION_WATCH_DIR_FORCE_GENERIC=true
    volumes:
      - "${USERDIR}/docker/transmission:/config"
      - "${STORAGE}/storage/transmission:/downloads"
      - "${USERDIR}/docker/shared/torrents:/watch"

  # torrent indexer -- can use [address]/torznab/all for full list
  jackett:
    image: ghcr.io/linuxserver/jackett:latest
    container_name: jackett
    network_mode: "service:wireguard-pia"
    restart: unless-stopped
    depends_on:
      - pihole
      - wireguard-pia
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
      - AUTO_UPDATE=true #optional
      #- RUN_OPTS=<run options here> #optional
    volumes:
      - "${USERDIR}/docker/jackett:/config"
      - "${USERDIR}/docker/shared/torrents:/downloads"

################################# MEDIA #######################################

# media request application for Sonarr, Radarr, Plex, etc...
  ombi:
    image: ghcr.io/linuxserver/ombi:latest
    container_name: ombi
    network_mode: "service:wireguard-pia"
    restart: unless-stopped
    depends_on:
      - pihole
      - wireguard-pia
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
      # for reverse proxy
      #- BASE_URL=/ombi #optional
    volumes:
      - "${USERDIR}/docker/ombi:/config"

  # media server for multiple devices -- considering swap to Jellyfin (on Roku!)
  plexms:
    image: plexinc/pms-docker:latest
    container_name: plexms
    network_mode: "host"
    restart: unless-stopped
    environment:
      - "TZ=${TZ}"
      - "PLEX_CLAIM=${PLEX_CLAIM}"
      - "PLEX_UID=${PUID}"
      - "PLEX_GID=${PGID}"
      - "ADVERTISE_IP=${PLEXENV}"
    volumes:
      - "${USERDIR}/docker/plexms:/config"
      - "${STORAGE}/plex_tmp:/transcode"
      - "${STORAGE}/tv_shows:/tv_shows"
      - "${STORAGE}/movies:/movies"
      - "${USERDIR}/docker/shared:/shared"

  # tv show media management, integrates with Jackett + Transmission + Plex
  sonarr:
    image: ghcr.io/linuxserver/sonarr:latest
    container_name: sonarr
    network_mode: "service:wireguard-pia"
    restart: unless-stopped
    depends_on:
      - pihole
      - wireguard-pia
    restart: unless-stopped
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
    volumes:
      - "${USERDIR}/docker/sonarr:/config"
      - "${STORAGE}/tv_shows:/tv"
      - "${STORAGE}/storage/transmission:/downloads"

  # movie media management, integrates with Jackett + Transmission + Plex
  radarr:
    image: ghcr.io/linuxserver/radarr:latest
    container_name: radarr
    network_mode: "service:wireguard-pia"
    restart: unless-stopped
    depends_on:
      - pihole
      - wireguard-pia
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
    volumes:
      - "${USERDIR}/docker/radarr:/config"
      - "${STORAGE}/movies:/movies"
      - "${STORAGE}/storage/transmission:/downloads"

  # ebook and audiobook manager/storefront -- extremely picky w/ metadata (ID3)
  lazylibrarian:
    image: ghcr.io/linuxserver/lazylibrarian
    container_name: lazylibrarian
    network_mode: "service:wireguard-pia"
    restart: unless-stopped
    depends_on:
      - pihole
      - wireguard-pia
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
      - DOCKER_MODS=linuxserver/calibre-web:calibre|linuxserver/mods:lazylibrarian-ffmpeg #optional
    volumes:
      - "${USERDIR}/docker/lazylibrarian:/config"
      - "${STORAGE}/storage/transmission/complete:/downloads"
      - "${STORAGE}/books/ebooks:/books"
      - "${STORAGE}/books/audiobooks:/audiobooks"
      - "${STORAGE}/books/import:/import"

############################## MEDIA BACKUP ####################################

  makemkv:
    image: jlesage/makemkv
    container_name: makemkv
    build: .
#    ports:
#      - "${SERVER_IP}:50505:5800"
    environment:
      - "USER_ID=${PUID}"
      - "GROUP_ID=${PGID}"
      - "TZ=${TZ}"
      - AUTO_DISC_RIPPER=1
      - AUTO_DISC_RIPPER_EJECT=1
    volumes:
      - "${USERDIR}/docker/makemkv:/config:rw"
      - "${STORAGE}/storage/makemkv:/storage:ro"
      - "${STORAGE}/storage/makemkv/output:/output:rw"
    devices:
      - /dev/sr0:/dev/sr0
      - /dev/sg1:/dev/sg1

  handbrake:
    image: jlesage/handbrake
    container_name: handbrake
    restart: unless-stopped
    build: .
#    ports:
#      - "${SERVER_IP}:40404:5800/tcp"
    environment:
      - "USER_ID=${PUID}"                                                                                                    
      - "GROUP_ID=${PGID}"                                                                                                   
      - "TZ=${TZ}"                                                                                                           
      - AUTOMATED_CONVERSION_PRESET=Devices/roku-bluray                                                                      
      - AUTOMATED_CONVERSION_FORMAT=mp4                                                                                      
      - AUTOMATED_CONVERSION_KEEP_SOURCE=0                                                                                   
      - AUTOMATED_CONVERSION_OUTPUT_DIR=/output                                                                              
      - AUTOMATED_CONVERSION_SOURCE_STABLE_TIME=30                                                                           
      - AUTOMATED_CONVERSION_CHECK_INTERVAL=60                                                                               
      - AUTOMATED_CONVERSION_NO_GUI_PROGRESS=1                                                                               
      - AUTOMATED_CONVERSION_OUTPUT_SUBDIR=SAME_AS_SRC                                                                       
    volumes:                                                                                                                 
      - "${USERDIR}/docker/handbrake:/config:rw"                                                                             
      - "${STORAGE}/storage/makemkv/output:/watch:rw"                                                                        
      - "${STORAGE}/storage/unsorted:/output:rw"

############################### SMART HOME #####################################

  # home automation, monitoring, and functional dashboard creator
  homeassistant:
    image: homeassistant/home-assistant:stable
    container_name: home-assistant
    network_mode: "host"
    restart: unless-stopped
    environment:
      - "TZ=${TZ}"
      - "PUID=${PUID}"
      - "PGID=${PGID}"
    volumes:
      - "${USERDIR}/docker/homeassistant:/config"
      - /etc/localtime:/etc/localtime:ro

###############################################################################
############################## IN DEVELOPMENT #################################
###############################################################################

  # pretty web interface for Calibre -- is this needed?
  calibre-web:
    image: ghcr.io/linuxserver/calibre-web:latest
    container_name: calibre-web
    restart: unless-stopped
    ports:
      - 8083:8083
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
      - DOCKER_MODS=linuxserver/calibre-web:calibre
    volumes:
      - "${USERDIR}/docker/shared/calibre:/config"
      - "${STORAGE}/books/ebooks:/books"

  # Guacamole running Calibre -- useful for ebooks, integrates w/ LazyLibrarian
  calibre:
    image: linuxserver/calibre:v4.23.0-ls78
    container_name: calibre
    restart: unless-stopped
    ports:
      - 8080:8080
      - 8081:8081
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
      - "GUAC_USER=${GUAC_USER}" #optional
      - "GUAC_PASS=${GUAC_PASS}" #optional
      #- CLI_ARGS= #optional
    volumes:
      - "${USERDIR}/docker/shared/calibre:/config"
      - "${STORAGE}/books/ebooks:/books"

  firefox:
    image: jlesage/firefox
    container_name: firefox
    network_mode: "service:wireguard-pia"
    restart: unless-stopped
    shm_size: '2gb' # shared memory size to avoid crashes
    security_opt: 
      - seccomp="${USERDIR}/docker/firefox/default.json"
    depends_on:
      - pihole
      - wireguard-pia
    environment:
      - "USER_ID=${PUID}"
      - "GROUP_ID=${PGID}"
      - "TZ=${TZ}"
      #- SECURE_CONNECTION=1
      - DISPLAY_WIDTH=1920
      - DISPLAY_HEIGHT=1080
    volumes:
      - "${USERDIR}/docker/firefox:/config:rw"
      - "${USERDIR}/docker/shared/torrents:/downloads"

#  swag:
#    image: linuxserver/swag
#    container_name: swag
#    restart: unless-stopped
#    cap_add: 
#      - NET_ADMIN
#    environment:
#      - "PUID=${PUID}"
#      - "PGID=${PGID}"
#      - "TZ=${TZ}"
#      - "URL=${DOMAIN}"
#      - SUBDOMAINS=wildcard,
#      - VALIDATION=dns
#      - DNSPLUGIN=googledomains
#      - "EMAIL=${EMAIL}"
#      - DHLEVEL=4096
#    ports:
#      - "${SERVER_IP}:443:443"
#      - "${SERVER_IP}:80:80" # for HTTP only, trying to force HTTPS
#    volumes:
#      - "${USERDIR}/docker/swag:/config"
#    restart: unless-stopped

#  ddclient:
#    image: ghcr.io/linuxserver/ddclient
#    container_name: ddclient
#    environment:
#      - "PUID=${PUID}"
#      - "PGID=${PGID}"
#      - "TZ=${TZ}"
#      - "URL=${DOMAIN}"
#    volumes:
#      - "${USERDIR}/docker/ddclient:/config"
#    restart: unless-stopped

  glances:
    image: nicolargo/glances:latest
    container_name: glances
    network_mode: host
    restart: always
    pid: "host"
    environment:
      - GLANCES_OPT=-w
    ports:
      - 61208:61208
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

