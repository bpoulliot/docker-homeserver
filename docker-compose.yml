version: "3.8"

services:

###############################################################################
################################ PRODUCTION  ##################################
###############################################################################

  pihole:
    image: pihole/pihole:latest
    container_name: pihole
    network_mode: "host"
    restart: always
    cap_add:
      - NET_ADMIN
    dns:
      - 127.0.0.1
      - 1.1.1.1
    environment:
      - "TZ=${TZ}"
      - "WEBPASSWORD=${WEBPASSWORD}"
      - "DNS1=1.1.1.1"
      - "DNS2=1.0.0.1"
      - "DNSMASQ_LISTENING=all"
    volumes:
      - "${USERDIR}/docker/pihole/pihole/:/etc/pihole/"
      - "${USERDIR}/docker/pihole/dnsmasq.d/:/etc/dnsmasq.d"
      - "${USERDIR}/docker/pihole/pihole.log:/var/log/pihole.log"
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    network_mode: "host"
    restart: always
    environment:
      - "TZ=${TZ}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - "${USERDIR}/docker/portainer:/data"
      - "${USERDIR}/docker/shared:/shared"
  plexms:
    image: plexinc/pms-docker:latest
    container_name: plexms
    network_mode: "host"
    restart: unless-stopped
    environment:
      - "TZ=${TZ}"
      - "PLEX_CLAIM=${PLEX_CLAIM}"
      - "PLEX_UID=${PUID}"
      - "PLEX_GID=${PGID}"
      - "ADVERTISE_IP=${PLEXENV}"
    volumes:
      - "${USERDIR}/docker/plexms:/config"
      - "${STORAGE}/plex_tmp:/transcode"
      - "${STORAGE}/tv_shows:/tv_shows"
      - "${STORAGE}/movies:/movies"
      - "${USERDIR}/docker/shared:/shared"
  homeassistant:
    image: homeassistant/home-assistant:stable
    container_name: home-assistant
    network_mode: "host"
    restart: unless-stopped
    environment:
      - "TZ=${TZ}"
      - "PUID=${PUID}"
      - "PGID=${PGID}"
    volumes:
      - "${USERDIR}/docker/homeassistant:/config"
      - /etc/localtime:/etc/localtime:ro
  transmission:
    image: ghcr.io/linuxserver/transmission:latest
    container_name: transmission
    network_mode: "service:wireguard-pia"
    restart: unless-stopped
    depends_on:
      - wireguard-pia
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
      - "USER=${TRNS_USER}"
      - "PASS=${TRNS_PASS}"
      - TRANSMISSION_WEB_HOME=/transmission-web-control/ #optional
      - TRANSMISSION_WATCH_DIR_FORCE_GENERIC=true
    volumes:
      - "${USERDIR}/docker/transmission:/config"
      - "${STORAGE}/storage/transmission:/downloads"
      - "${STORAGE}/storage/transmission/watch:/watch"
  sonarr:
    image: ghcr.io/linuxserver/sonarr:latest
    container_name: sonarr
    network_mode: "service:wireguard-pia"
    restart: unless-stopped
    depends_on:
      - wireguard-pia
    restart: unless-stopped
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"    
    volumes:
      - "${USERDIR}/docker/sonarr:/config"
      - "${STORAGE}/tv_shows:/tv"
      - "${STORAGE}/storage/transmission:/downloads"
  radarr:
    image: ghcr.io/linuxserver/radarr:latest
    container_name: radarr
    network_mode: "service:wireguard-pia"
    restart: unless-stopped
    depends_on:
      - wireguard-pia
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
    volumes:
      - "${USERDIR}/docker/radarr:/config"
      - "${STORAGE}/movies:/movies"
      - "${STORAGE}/storage/transmission:/downloads"
  jackett:
    image: ghcr.io/linuxserver/jackett:latest
    container_name: jackett
    network_mode: "service:wireguard-pia"
    restart: unless-stopped
    depends_on:
      - wireguard-pia
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
      - AUTO_UPDATE=true #optional
      #- RUN_OPTS=<run options here> #optional
    volumes:
      - "${USERDIR}/docker/jackett:/config"
      - "${STORAGE}/storage/transmission/watch:/downloads"
  wireguard-pia:
    image: thrnz/docker-wireguard-pia:latest
    container_name: wireguard-pia
    restart: always
    depends_on:
      - pihole
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      # wg-quick fails to set this without --privileged, so set it here instead if needed
      - net.ipv4.conf.all.src_valid_mark=1
      # May as well disable ipv6. Should be blocked anyway.
      - net.ipv6.conf.default.disable_ipv6=1
      - net.ipv6.conf.all.disable_ipv6=1
      - net.ipv6.conf.lo.disable_ipv6=1
    # The container has no recovery logic. Use a healthcheck to catch disconnects.
    healthcheck:
      test: ping -c 1 www.google.com || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - "LOC=${PIA_LOC}"
      - "USER=${PIA_USER}"
      - "PASS=${PIA_PASS}"
      - "LOCAL_NETWORK=${LOCAL_NET}"
    volumes:
      - "${USERDIR}/docker/wireguard-pia:/pia"
      - "${USERDIR}/docker/shared:/pia-shared"
    ports:
      - "${SERVER_IP}:9117:9117" # jackett
      - "${SERVER_IP}:9091:9091/tcp" # transmission
      - "${SERVER_IP}:51413:51413/tcp" # transmission
      - "${SERVER_IP}:51413:51413/udp" # transmission
      - "${SERVER_IP}:20202:8989/tcp" # sonarr
      - "${SERVER_IP}:5299:5299/tcp" # lazylibrarian
      - "${SERVER_IP}:30303:7878/tcp" # radarr
      - "${SERVER_IP}:3579:3579/tcp" # ombi
      - "${SERVER_IP}:4040:4040" # booksonic-air

###############################################################################
############################## IN DEVELOPMENT #################################
###############################################################################

  # !TODO set only playlist to watch later? selectively include vids
  youtube-dl:
    image: jeeaaasustest/youtube-dl:latest
    container_name: youtube-dl
    network_mode: "service:wireguard-pia"
    restart: unless-stopped
    depends_on:
      - wireguard-pia
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
      - youtubedl_interval=3h
      - youtubedl_quality=2160
    volumes:
      - "${USERDIR}/docker/youtube-dl:/config"
      - "${STORAGE}/tv_shows:/downloads"

  lazylibrarian:
    image: ghcr.io/linuxserver/lazylibrarian
    container_name: lazylibrarian
    network_mode: "service:wireguard-pia"
    restart: unless-stopped
    depends_on:
      - pihole
      - wireguard-pia
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
      - DOCKER_MODS=linuxserver/calibre-web:calibre|linuxserver/mods:lazylibrarian-ffmpeg #optional
    volumes:
      - "${USERDIR}/docker/lazylibrarian:/config"
      - "${STORAGE}/storage/transmission/complete:/downloads"
      - "${STORAGE}/books/ebooks:/books"
      - "${STORAGE}/books/audiobooks:/audiobooks"
      - "${STORAGE}/books/import:/import"

  ombi:
    image: ghcr.io/linuxserver/ombi:latest
    container_name: ombi
    # !VPN This sets ombi to run through VPN
    network_mode: "service:wireguard-pia"
    restart: unless-stopped
    depends_on:
      - pihole
      - wireguard-pia
    # !OPEN This sets ombi to run local only
    #ports:
    #  - 3579:3579
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
      # for reverse proxy
      #- BASE_URL=/ombi #optional
    volumes:
      - "${USERDIR}/docker/ombi:/config"

  calibre-web:
    image: ghcr.io/linuxserver/calibre-web:latest
    container_name: calibre-web
    restart: unless-stopped
    ports:
      - 8083:8083
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
      - DOCKER_MODS=linuxserver/calibre-web:calibre
    volumes:
      - "${USERDIR}/docker/shared/calibre:/config"
      - "${STORAGE}/books/ebooks:/books"

  calibre:
    image: linuxserver/calibre:v4.23.0-ls78
    container_name: calibre
    restart: unless-stopped
    ports:
      - 8080:8080
      - 8081:8081
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
      - "GUAC_USER=${GUAC_USER}" #optional
      - "GUAC_PASS=${GUAC_PASS}" #optional
      #- CLI_ARGS= #optional
    volumes:
      - "${USERDIR}/docker/shared/calibre:/config"
      - "${STORAGE}/books/ebooks:/books"

  booksonic-air:
    image: ghcr.io/linuxserver/booksonic-air:latest
    container_name: booksonic-air
    network_mode: "service:wireguard-pia"
    restart: unless-stopped
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}" 
      # for reverse proxy
      #- CONTEXT_PATH=url-base
    volumes:
      - "${USERDIR}/docker/booksonic-air:/config"
      - "${STORAGE}/books/audiobooks:/audiobooks"

  duckdns:
    image: ghcr.io/linuxserver/duckdns:latest
    container_name: duckdns
    restart: unless-stopped
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}" 
      - "SUBDOMAINS=${DDNS_DOMAIN}"
      - "TOKEN=${DDNS_TOKEN}"
      - LOG_FILE=true #optional - needs /config if true
    volumes:
      - "${USERDIR}/docker/duckdns:/config"

###############################################################################
############################## OUT OF SERVICE #################################
###############################################################################

# Removed in favor of wireguard setup -- keep for 60 days (2020-11-13)
#  pia-vpn:
#    image: qmcgaw/private-internet-access
#    container_name: pia-vpn
#    cap_add:
#      - NET_ADMIN
#    network_mode: bridge
#    depends_on:
#      - pihole
#    ports:
#      - [REMOVED]
#    volumes:
#      - "${USERDIR}/docker/pia-vpn:/gluetun"
#    environment:
#      - OPENVPN_IPV6=off
#      - VPNSP=private internet access
#      - "TZ=${TZ}"
#      - "USER=${PIA_USER}"
#      - "PASSWORD=${PIA_PASS}"
#      - REGION=${PIA_LOC}
#      - "UID=${PUID}"
#      - "GID=${PGID}"
#      - FIREWALL_OUTBOUND_SUBNETS=${LOCAL_NET}
